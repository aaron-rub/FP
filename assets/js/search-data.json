{
  
    
        "post0": {
            "title": "Problems and Corrections!",
            "content": "Our problems . One of the problems that we faced during project was the sign-in page. Currently we have our sign-in page set as a front end file, but we are struggling to find a way to make a functional sign-in page. . | Another problem we have is avaliabilty after school, majority of our gorup members are very busy after school because of sports, work, and other classes. What we have done to fix this problem is stay in during office hours and lunch and start working on our project as a group. . | . Accomplishments . Succesfully deployed our website and it has a fucntioning domain | Multiple new submenus | Frontend appearance | For our API we designed a concept in which customers can rate our products with certain raitings. | .",
            "url": "https://aaron-rub.github.io/FP/jupyter/python/2022/10/25/my-progress.html",
            "relUrl": "/jupyter/python/2022/10/25/my-progress.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence using random joke num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) .",
            "url": "https://aaron-rub.github.io/FP/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Chapter 1.4 Notes",
            "content": "Errors and how to correct errors . How to make corrections to your code . There are many different types of errors | There is no such thing as writing a program without having errors | There are four different types of errors: | Logic Errors | . | Syntax Errors | . | Runtime Errors | . | Overflow Errors | . | Logic Errors is a problem caused by the programmer, it has nothing due to the machine. | Syntax Errors happen when the programmer does something that doesnt line up with the rules of the language that they are using | Runtime Errors happens when in the middle of the program the program fails, it usually occurs because of a certain input. | Overflow Errors is when the program maxes out the amount of memory allocation to a certain variable | . What I can incorperate into my daily schedule . When I encounter an error, before doing anything else I should find the error and determine what type is it | Logic Errors is a problem caused by the programmer, it has nothing due to the machine. | Syntax Errors happen when the programmer does something that doesnt line up with the rules of the language that they are using | Runtime Errors happens when in the middle of the program the program fails, it usually occurs because of a certain input. | Overflow Errors is when the program maxes out the amount of memory allocation to a certain variable | .",
            "url": "https://aaron-rub.github.io/FP/markdown/2022/10/06/1.4-notes.html",
            "relUrl": "/markdown/2022/10/06/1.4-notes.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;a887a57462msh889608deb83b3ddp11d368jsnce0092f67d7a&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; for coin in json[&quot;data&quot;][&quot;coins&quot;]: print(f&#39;{coin[&quot;symbol&quot;]} {coin[&quot;name&quot;]} {coin[&quot;price&quot;]}&#39;) . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1474,&#34;totalCoins&#34;:21304,&#34;totalMarkets&#34;:31359,&#34;totalExchanges&#34;:171,&#34;totalMarketCap&#34;:&#34;933335720684&#34;,&#34;total24hVolume&#34;:&#34;48393738116&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;366055445082&#34;,&#34;price&#34;:&#34;19087.564134101154&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.02&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;19100.77140776339&#34;,&#34;19139.343483909608&#34;,&#34;19107.74757626413&#34;,&#34;19125.26467544607&#34;,&#34;19155.377711491547&#34;,&#34;19145.90173200207&#34;,&#34;19137.946932319603&#34;,&#34;19099.16888294777&#34;,&#34;19106.891443704022&#34;,&#34;19100.13899301119&#34;,&#34;19117.10204473073&#34;,&#34;19106.849997500853&#34;,&#34;19096.64562593575&#34;,&#34;19122.13744293084&#34;,&#34;19130.868911012232&#34;,&#34;19138.422280581635&#34;,&#34;19164.21380746879&#34;,&#34;19178.68753406358&#34;,&#34;19167.829003771007&#34;,&#34;19158.503400192974&#34;,&#34;19142.31709233236&#34;,&#34;19112.76810728462&#34;,&#34;19099.76923890871&#34;,&#34;19100.26170553246&#34;,&#34;19091.446561683577&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;24848201802&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;157326928353&#34;,&#34;price&#34;:&#34;1285.2687649159172&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.36&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1291.6776366017905&#34;,&#34;1296.2467641598541&#34;,&#34;1294.5656549921914&#34;,&#34;1296.4996947186326&#34;,&#34;1301.2397970600425&#34;,&#34;1300.1684065556988&#34;,&#34;1300.1425119576454&#34;,&#34;1296.0748599479127&#34;,&#34;1297.4360791195973&#34;,&#34;1296.7412977415993&#34;,&#34;1298.0926038860634&#34;,&#34;1294.8351056080965&#34;,&#34;1293.0538957059812&#34;,&#34;1296.5828162139526&#34;,&#34;1297.509689605098&#34;,&#34;1297.3908773329456&#34;,&#34;1299.4608306391524&#34;,&#34;1298.3164350785978&#34;,&#34;1295.5022856807816&#34;,&#34;1295.0542927297345&#34;,&#34;1296.5467826169427&#34;,&#34;1292.9809794127207&#34;,&#34;1287.4765152733794&#34;,&#34;1287.0214001306797&#34;,&#34;1284.9535226942207&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;8177600344&#34;,&#34;btcPrice&#34;:&#34;0.06733539994344812&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68438460648&#34;,&#34;price&#34;:&#34;1.0002426352802434&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.01&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;0.9998025884586756&#34;,&#34;0.9995668463410777&#34;,&#34;0.9997396580746005&#34;,&#34;0.9991859488271857&#34;,&#34;0.9989766123229601&#34;,&#34;1.0000171109428426&#34;,&#34;1.000072633100531&#34;,&#34;1.001017278460763&#34;,&#34;1.0001591616480392&#34;,&#34;1.0002320994319398&#34;,&#34;0.9996862169357857&#34;,&#34;1.0002408971145225&#34;,&#34;1.0000577512995061&#34;,&#34;0.999567098788077&#34;,&#34;0.9996336625060454&#34;,&#34;0.9996162237962098&#34;,&#34;0.9992893836190323&#34;,&#34;0.9997546970412062&#34;,&#34;1.0003425893054547&#34;,&#34;1.0000802110185432&#34;,&#34;1.0000131938548675&#34;,&#34;1.0008019319587325&#34;,&#34;1.000989958371683&#34;,&#34;1.0004992240839103&#34;,&#34;1.0004706107091208&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;31343287270&#34;,&#34;btcPrice&#34;:&#34;0.00005240284345624&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;45817565931&#34;,&#34;price&#34;:&#34;1.0001842392017035&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.07&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;1.0003184869761534&#34;,&#34;1.000168925800393&#34;,&#34;0.9999409308389783&#34;,&#34;0.9995897473260447&#34;,&#34;0.9992667769668551&#34;,&#34;1.0003644519276016&#34;,&#34;1.0002494797618298&#34;,&#34;1.0012607987694395&#34;,&#34;1.000421694162662&#34;,&#34;1.000402173804346&#34;,&#34;0.9999283519394975&#34;,&#34;1.0001956177485543&#34;,&#34;1.0002157977678496&#34;,&#34;0.9996616342375895&#34;,&#34;0.9998756197343389&#34;,&#34;0.999784140631018&#34;,&#34;0.9994563403672927&#34;,&#34;0.9998430351098059&#34;,&#34;1.0004656081727505&#34;,&#34;1.0002083306604672&#34;,&#34;1.0000574801330278&#34;,&#34;1.0008548454233563&#34;,&#34;1.0011161552889811&#34;,&#34;1.0004392982353723&#34;,&#34;1.0004194781353&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;2959313291&#34;,&#34;btcPrice&#34;:&#34;0.000052399784077991&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;39004644633&#34;,&#34;price&#34;:&#34;269.2282069028177&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.01&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;271.91326422873396&#34;,&#34;272.31350055717127&#34;,&#34;271.58920053769197&#34;,&#34;271.96110826401883&#34;,&#34;272.10034775148273&#34;,&#34;271.83929986715435&#34;,&#34;271.5810414105919&#34;,&#34;270.83840998760934&#34;,&#34;270.6378799467827&#34;,&#34;270.51130955239347&#34;,&#34;270.8922449320356&#34;,&#34;269.9905331248805&#34;,&#34;269.91476825936206&#34;,&#34;270.79894321456464&#34;,&#34;270.8872300793565&#34;,&#34;270.98013450336805&#34;,&#34;271.3239098974214&#34;,&#34;271.2369710302756&#34;,&#34;271.101479098388&#34;,&#34;270.98098871819786&#34;,&#34;271.639436814092&#34;,&#34;270.4458505555315&#34;,&#34;269.7868987437791&#34;,&#34;269.96051720207225&#34;,&#34;269.3807365145171&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;734066071&#34;,&#34;btcPrice&#34;:&#34;0.014104901233668903&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;23509966118&#34;,&#34;price&#34;:&#34;0.47053637545048793&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.34&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.4877056306427419&#34;,&#34;0.4901049220406547&#34;,&#34;0.48934702462150537&#34;,&#34;0.48719531406668176&#34;,&#34;0.48797236328064086&#34;,&#34;0.48742669821942003&#34;,&#34;0.4892422023778607&#34;,&#34;0.48896641519501816&#34;,&#34;0.4896244188772186&#34;,&#34;0.488596920012167&#34;,&#34;0.4934470097188604&#34;,&#34;0.4911587575834096&#34;,&#34;0.48877089912282107&#34;,&#34;0.4885903288186197&#34;,&#34;0.4881265250120865&#34;,&#34;0.4892210426535321&#34;,&#34;0.4887887960494007&#34;,&#34;0.4879509772949865&#34;,&#34;0.4873499617568416&#34;,&#34;0.4881313820852007&#34;,&#34;0.48633950676099347&#34;,&#34;0.4757880234712845&#34;,&#34;0.47125553234902007&#34;,&#34;0.4731177243715651&#34;,&#34;0.4725193304974035&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;1789376130&#34;,&#34;btcPrice&#34;:&#34;0.000024651462708636&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21221427875&#34;,&#34;price&#34;:&#34;1.000347401522267&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.21&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.0000535938319535&#34;,&#34;0.9993015206741257&#34;,&#34;0.9992979412928847&#34;,&#34;0.9992974346936204&#34;,&#34;0.9990252571235719&#34;,&#34;0.9999581103566587&#34;,&#34;1.00007311702045&#34;,&#34;1.001234975687873&#34;,&#34;1.000391713088151&#34;,&#34;1.0003251659777517&#34;,&#34;0.9998979825950829&#34;,&#34;1.000088160453627&#34;,&#34;1.000272009439455&#34;,&#34;0.9996554580677925&#34;,&#34;0.9996924184368298&#34;,&#34;0.9996580063979866&#34;,&#34;0.9992567857448429&#34;,&#34;0.9998369535890845&#34;,&#34;1.0003795337641765&#34;,&#34;1.0000192041155194&#34;,&#34;0.999827035277134&#34;,&#34;1.0010170217387018&#34;,&#34;1.0011817813221007&#34;,&#34;1.0007253348754674&#34;,&#34;1.0004609453488684&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;5590396411&#34;,&#34;btcPrice&#34;:&#34;0.000052408332173464&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;11582898558&#34;,&#34;price&#34;:&#34;0.3722910160714077&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.94&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.39252067401746843&#34;,&#34;0.39387526274350726&#34;,&#34;0.39349267097456425&#34;,&#34;0.3940148697195984&#34;,&#34;0.3943107383247446&#34;,&#34;0.394176198114732&#34;,&#34;0.3932048642009743&#34;,&#34;0.39118243104902656&#34;,&#34;0.3911990162496316&#34;,&#34;0.39048228442313143&#34;,&#34;0.391258918699009&#34;,&#34;0.3908008215035503&#34;,&#34;0.38827508400848554&#34;,&#34;0.38751453657364004&#34;,&#34;0.3864605887935671&#34;,&#34;0.3853777332734843&#34;,&#34;0.38563165447185244&#34;,&#34;0.3801881065329634&#34;,&#34;0.38090089274827627&#34;,&#34;0.38114048219287877&#34;,&#34;0.38167367610860586&#34;,&#34;0.37769391035839006&#34;,&#34;0.3744347367031173&#34;,&#34;0.3745948764909117&#34;,&#34;0.3736378682702875&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;552937766&#34;,&#34;btcPrice&#34;:&#34;0.000019504375385767&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;10964900236&#34;,&#34;price&#34;:&#34;30.650855742571498&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.65&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;31.210385845074377&#34;,&#34;31.31437377455034&#34;,&#34;31.2462000658173&#34;,&#34;31.291680704749794&#34;,&#34;31.387257001701844&#34;,&#34;31.308796895609376&#34;,&#34;31.2698095579771&#34;,&#34;31.14444862672958&#34;,&#34;31.15072091878064&#34;,&#34;31.157254792202643&#34;,&#34;31.249619201575804&#34;,&#34;31.145690551402282&#34;,&#34;31.03170161635154&#34;,&#34;31.089451069220686&#34;,&#34;31.12663581499555&#34;,&#34;31.15392742455593&#34;,&#34;31.203876885757303&#34;,&#34;31.219092837365665&#34;,&#34;31.16544224364071&#34;,&#34;31.155248989864024&#34;,&#34;31.156548212966054&#34;,&#34;30.95817374393274&#34;,&#34;30.80682906594436&#34;,&#34;30.80333905135274&#34;,&#34;30.665548343762087&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;631330856&#34;,&#34;btcPrice&#34;:&#34;0.001605802370969472&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;8020974443&#34;,&#34;price&#34;:&#34;0.05879608357207651&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.62&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.06035871591523217&#34;,&#34;0.0605044147299303&#34;,&#34;0.06025749150786387&#34;,&#34;0.06030133181330444&#34;,&#34;0.060423933498615565&#34;,&#34;0.06032846922922995&#34;,&#34;0.06022874063870676&#34;,&#34;0.05988465705026199&#34;,&#34;0.05979272917926893&#34;,&#34;0.0597225331418747&#34;,&#34;0.059959470440159826&#34;,&#34;0.05979035376448757&#34;,&#34;0.05964983876299978&#34;,&#34;0.05973375690107231&#34;,&#34;0.05984083951127913&#34;,&#34;0.05992296999440376&#34;,&#34;0.06001385440982791&#34;,&#34;0.06007156231718466&#34;,&#34;0.05997323290667098&#34;,&#34;0.059833815975675414&#34;,&#34;0.0597864520862407&#34;,&#34;0.05929146156638222&#34;,&#34;0.058698226347801925&#34;,&#34;0.058908012049619&#34;,&#34;0.05892971530180579&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;228621083&#34;,&#34;btcPrice&#34;:&#34;0.000003080334565427&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;6999881240&#34;,&#34;price&#34;:&#34;6.076480163125043&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.90&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;6.204972296366513&#34;,&#34;6.215449390280833&#34;,&#34;6.206406171468649&#34;,&#34;6.2084934743873115&#34;,&#34;6.222285029058879&#34;,&#34;6.215401949007378&#34;,&#34;6.213618355754067&#34;,&#34;6.193365085049077&#34;,&#34;6.195577524684267&#34;,&#34;6.1887458269649835&#34;,&#34;6.186512935123257&#34;,&#34;6.169989408881061&#34;,&#34;6.154735566970365&#34;,&#34;6.156765739263094&#34;,&#34;6.165945526618243&#34;,&#34;6.1544901605322195&#34;,&#34;6.161626944514466&#34;,&#34;6.175058289061766&#34;,&#34;6.173086913298112&#34;,&#34;6.174674696522207&#34;,&#34;6.166903205148425&#34;,&#34;6.12595779774793&#34;,&#34;6.079467303441903&#34;,&#34;6.094617626548209&#34;,&#34;6.090845273646895&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;231658776&#34;,&#34;btcPrice&#34;:&#34;0.000318347596394923&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;6674172027&#34;,&#34;price&#34;:&#34;0.7622684423622607&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.93&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;0.79353609781098&#34;,&#34;0.7967056088426174&#34;,&#34;0.7964424982121195&#34;,&#34;0.7980579504303267&#34;,&#34;0.798999407167901&#34;,&#34;0.7976436662830291&#34;,&#34;0.7968952786163747&#34;,&#34;0.7940401294067756&#34;,&#34;0.7930149416118768&#34;,&#34;0.791485732587471&#34;,&#34;0.7931473847261331&#34;,&#34;0.7904654563952105&#34;,&#34;0.7869586856837272&#34;,&#34;0.7869536051318936&#34;,&#34;0.7877303545750034&#34;,&#34;0.7868006465832196&#34;,&#34;0.7873813622959166&#34;,&#34;0.7887161594463283&#34;,&#34;0.7860612914785033&#34;,&#34;0.7837102521274445&#34;,&#34;0.7855617811951122&#34;,&#34;0.7783764368920957&#34;,&#34;0.7685735592994474&#34;,&#34;0.7692425356720203&#34;,&#34;0.7643499944985281&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;246813940&#34;,&#34;btcPrice&#34;:&#34;0.000039935344133326&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6202707944&#34;,&#34;price&#34;:&#34;1.0003099070659387&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.03&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.9998670565124128&#34;,&#34;0.9996784152850401&#34;,&#34;0.9997401454588845&#34;,&#34;0.9992607810989931&#34;,&#34;0.9990188179216751&#34;,&#34;1.0000383847437635&#34;,&#34;1.000025991079812&#34;,&#34;1.0009051201659704&#34;,&#34;1.0000902547268296&#34;,&#34;1.000147343346243&#34;,&#34;0.9996965713371524&#34;,&#34;1.0001406020695256&#34;,&#34;1.000114134581395&#34;,&#34;0.9995759597517285&#34;,&#34;0.9998046721655112&#34;,&#34;0.9995768117214102&#34;,&#34;0.9992764024116175&#34;,&#34;0.9995569781923126&#34;,&#34;1.0001798689251542&#34;,&#34;1.0000844179892818&#34;,&#34;0.9998835509563981&#34;,&#34;1.000442230932422&#34;,&#34;1.000950642426637&#34;,&#34;1.0003409457658463&#34;,&#34;1.0003521167092544&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;271582266&#34;,&#34;btcPrice&#34;:&#34;0.000052406367833956&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;5892672504&#34;,&#34;price&#34;:&#34;0.000009995133678276&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.85&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;0.000010302104044901&#34;,&#34;0.000010349651601484&#34;,&#34;0.000010344398961173&#34;,&#34;0.000010343638965409&#34;,&#34;0.000010358030739445&#34;,&#34;0.000010335465636747&#34;,&#34;0.000010313371953524&#34;,&#34;0.00001024767986816&#34;,&#34;0.000010231996832116&#34;,&#34;0.000010202459020641&#34;,&#34;0.000010203850311604&#34;,&#34;0.000010168351134248&#34;,&#34;0.000010124930593289&#34;,&#34;0.000010153838175669&#34;,&#34;0.00001016510723559&#34;,&#34;0.000010185294645177&#34;,&#34;0.000010199935812913&#34;,&#34;0.000010197678040841&#34;,&#34;0.000010190020211934&#34;,&#34;0.000010175066515823&#34;,&#34;0.000010194935191176&#34;,&#34;0.000010119276188881&#34;,&#34;0.000010015157015681&#34;,&#34;0.000010038826273768&#34;,&#34;0.000010009474442325&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;186585417&#34;,&#34;btcPrice&#34;:&#34;5.2364637e-10&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5701248685&#34;,&#34;price&#34;:&#34;0.06175363394022226&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.02&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.06182044291190045&#34;,&#34;0.062113850727473316&#34;,&#34;0.06351601446673555&#34;,&#34;0.0635858467247124&#34;,&#34;0.06330357651720518&#34;,&#34;0.06309239420375767&#34;,&#34;0.06281849440533636&#34;,&#34;0.06295544625915886&#34;,&#34;0.06294119307493513&#34;,&#34;0.06252486064491686&#34;,&#34;0.06201266097679427&#34;,&#34;0.061952961565330526&#34;,&#34;0.06191099352078886&#34;,&#34;0.06215624451170626&#34;,&#34;0.06226530845319353&#34;,&#34;0.06215479098592301&#34;,&#34;0.06208930207662629&#34;,&#34;0.06192688694572451&#34;,&#34;0.061805093406720364&#34;,&#34;0.061963141783254745&#34;,&#34;0.06205821867241236&#34;,&#34;0.061910779531064816&#34;,&#34;0.06161742862066395&#34;,&#34;0.06174245128866282&#34;,&#34;0.061765719800873344&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;529891231&#34;,&#34;btcPrice&#34;:&#34;0.000003235281018907&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5273313820&#34;,&#34;price&#34;:&#34;1286.1604788767515&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.22&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1289.941843000679&#34;,&#34;1293.9955143161578&#34;,&#34;1295.9314371196917&#34;,&#34;1296.3738341687958&#34;,&#34;1299.4035149840906&#34;,&#34;1302.6732198570535&#34;,&#34;1300.9520495637646&#34;,&#34;1298.2913609463667&#34;,&#34;1297.170352635241&#34;,&#34;1296.8698749630273&#34;,&#34;1297.2211984686512&#34;,&#34;1296.6690531616941&#34;,&#34;1293.7521304914928&#34;,&#34;1296.1481579240483&#34;,&#34;1298.0012064951266&#34;,&#34;1296.4397311393604&#34;,&#34;1296.0096073665943&#34;,&#34;1299.7106840945767&#34;,&#34;1298.2256546127496&#34;,&#34;1298.2955262081387&#34;,&#34;1297.241735367312&#34;,&#34;1295.601275513359&#34;,&#34;1287.241736620925&#34;,&#34;1286.8092927309285&#34;,&#34;1286.9730781359679&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;88741110&#34;,&#34;btcPrice&#34;:&#34;0.06738307531492879&#34;},{&#34;uuid&#34;:&#34;x4WXHge-vvFY&#34;,&#34;symbol&#34;:&#34;WBTC&#34;,&#34;name&#34;:&#34;Wrapped BTC&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg&#34;,&#34;marketCap&#34;:&#34;4662253161&#34;,&#34;price&#34;:&#34;19075.80943893763&#34;,&#34;listedAt&#34;:1549894980,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.06&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;19103.574687736513&#34;,&#34;19141.64901589317&#34;,&#34;19110.780029400776&#34;,&#34;19121.68647044404&#34;,&#34;19158.19864789848&#34;,&#34;19145.288180578773&#34;,&#34;19139.40744214324&#34;,&#34;19100.673027794317&#34;,&#34;19104.295488106138&#34;,&#34;19099.30375158462&#34;,&#34;19117.111525603654&#34;,&#34;19109.51291462512&#34;,&#34;19098.36768794763&#34;,&#34;19126.870851180887&#34;,&#34;19132.855486762885&#34;,&#34;19142.446662639177&#34;,&#34;19167.18680399502&#34;,&#34;19181.894751998327&#34;,&#34;19166.694239818193&#34;,&#34;19154.673540317155&#34;,&#34;19142.818135455662&#34;,&#34;19107.338375386375&#34;,&#34;19090.579665661826&#34;,&#34;19094.27790353065&#34;,&#34;19084.51967565449&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc&#34;,&#34;24hVolume&#34;:&#34;141145026&#34;,&#34;btcPrice&#34;:&#34;0.9993841699715615&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;4604102544&#34;,&#34;price&#34;:&#34;15.536559461452313&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.67&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;15.971290297465687&#34;,&#34;16.04568039167244&#34;,&#34;16.007272281281008&#34;,&#34;16.047302130965964&#34;,&#34;16.11066794865584&#34;,&#34;16.09981718411465&#34;,&#34;16.0923072884437&#34;,&#34;16.010510782594487&#34;,&#34;16.009911800036196&#34;,&#34;15.980245923556813&#34;,&#34;16.022306815010516&#34;,&#34;15.987492348720576&#34;,&#34;15.928780190840333&#34;,&#34;15.953630224027334&#34;,&#34;15.980037350227805&#34;,&#34;15.984626963378483&#34;,&#34;15.998402934361396&#34;,&#34;16.029787216980555&#34;,&#34;15.990079363016049&#34;,&#34;15.966708664231552&#34;,&#34;15.959507434732522&#34;,&#34;15.79610301334472&#34;,&#34;15.551791164600338&#34;,&#34;15.603694913987374&#34;,&#34;15.582113455638996&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;195232769&#34;,&#34;btcPrice&#34;:&#34;0.00081396239731267&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;4471518635&#34;,&#34;price&#34;:&#34;5.758114772582682&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.53&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;6.1137920931676915&#34;,&#34;6.141377901787754&#34;,&#34;6.109993574917787&#34;,&#34;6.115610822196178&#34;,&#34;6.13775444337768&#34;,&#34;6.114446576801428&#34;,&#34;6.105803098475257&#34;,&#34;6.074705066697931&#34;,&#34;6.086981526171975&#34;,&#34;6.082592166577034&#34;,&#34;6.110384619942078&#34;,&#34;6.094776976963478&#34;,&#34;6.057628618037816&#34;,&#34;6.0855825875382585&#34;,&#34;6.0917577302513175&#34;,&#34;6.088680059864249&#34;,&#34;6.10036144211662&#34;,&#34;6.098934285069833&#34;,&#34;6.0726864058131635&#34;,&#34;6.043741284827409&#34;,&#34;6.004093352467678&#34;,&#34;5.926359079706556&#34;,&#34;5.791020283214529&#34;,&#34;5.787027863862137&#34;,&#34;5.7756064104696865&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;83301558&#34;,&#34;btcPrice&#34;:&#34;0.000301668391635968&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;4215508843&#34;,&#34;price&#34;:&#34;16.752966087401443&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;5.56&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;15.913082238672033&#34;,&#34;15.969050754930159&#34;,&#34;15.996849865859563&#34;,&#34;15.947545858923256&#34;,&#34;16.007142845963717&#34;,&#34;15.996079412657137&#34;,&#34;16.005759317974327&#34;,&#34;15.886159212678011&#34;,&#34;15.913927349918064&#34;,&#34;15.95243866819292&#34;,&#34;16.02224797194165&#34;,&#34;15.963275551885276&#34;,&#34;15.961285295357966&#34;,&#34;15.98630835202917&#34;,&#34;16.04192217802242&#34;,&#34;16.216987817261266&#34;,&#34;16.198017026132533&#34;,&#34;16.261473336738238&#34;,&#34;16.432466025324057&#34;,&#34;16.490103357447353&#34;,&#34;16.68251464782233&#34;,&#34;16.603512314051695&#34;,&#34;16.429033751955785&#34;,&#34;16.688726403584926&#34;,&#34;16.79495803971385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;33649579&#34;,&#34;btcPrice&#34;:&#34;0.000877690100722239&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;4121685189&#34;,&#34;price&#34;:&#34;4.386250093491571&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.49&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;4.549676815558783&#34;,&#34;4.552343437983433&#34;,&#34;4.546916233619528&#34;,&#34;4.549258320653753&#34;,&#34;4.564462230053396&#34;,&#34;4.58174585425837&#34;,&#34;4.58798442803999&#34;,&#34;4.516864372346332&#34;,&#34;4.490906538351236&#34;,&#34;4.479992186852571&#34;,&#34;4.475959388499419&#34;,&#34;4.454816815293995&#34;,&#34;4.446674225825779&#34;,&#34;4.465042317587556&#34;,&#34;4.464586237866187&#34;,&#34;4.462445945879758&#34;,&#34;4.468543036504579&#34;,&#34;4.4654375539077815&#34;,&#34;4.475053092200925&#34;,&#34;4.461199463545525&#34;,&#34;4.469681262183743&#34;,&#34;4.452958470016366&#34;,&#34;4.427227324531306&#34;,&#34;4.40899879216857&#34;,&#34;4.396282900356349&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;58101244&#34;,&#34;btcPrice&#34;:&#34;0.000229796220338836&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3673945625&#34;,&#34;price&#34;:&#34;51.84406470389362&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.77&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;52.29357118234588&#34;,&#34;52.560953857362485&#34;,&#34;52.47593591674778&#34;,&#34;52.59840673843084&#34;,&#34;52.74116547405248&#34;,&#34;52.470963924628016&#34;,&#34;52.30959257145694&#34;,&#34;52.09001795238555&#34;,&#34;52.15081395687535&#34;,&#34;52.12970443780629&#34;,&#34;52.22078821416581&#34;,&#34;52.07864176106166&#34;,&#34;52.045348070541&#34;,&#34;52.17909476941324&#34;,&#34;52.2022756350905&#34;,&#34;52.14871299696744&#34;,&#34;52.24361609016691&#34;,&#34;52.24408890361021&#34;,&#34;52.16994244133274&#34;,&#34;52.22150931205504&#34;,&#34;52.35263782065842&#34;,&#34;52.0348594552937&#34;,&#34;51.84554883703099&#34;,&#34;51.91904831645147&#34;,&#34;51.91626090686419&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;588245081&#34;,&#34;btcPrice&#34;:&#34;0.002716117380911422&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;3554234340&#34;,&#34;price&#34;:&#34;11.389122173134037&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.34&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;12.065080400509549&#34;,&#34;12.133196920063575&#34;,&#34;12.107809478530966&#34;,&#34;12.127246847216995&#34;,&#34;12.149121074829239&#34;,&#34;12.11014340812835&#34;,&#34;12.075657462587376&#34;,&#34;12.020408229527229&#34;,&#34;12.021841666535522&#34;,&#34;11.963342637469308&#34;,&#34;12.001557662066565&#34;,&#34;11.933362526494951&#34;,&#34;11.848037077692375&#34;,&#34;11.814766191463486&#34;,&#34;11.81512227689274&#34;,&#34;11.747793647787152&#34;,&#34;11.772707552601942&#34;,&#34;11.802604067261012&#34;,&#34;11.775978253252209&#34;,&#34;11.754583990901533&#34;,&#34;11.769174030235433&#34;,&#34;11.52408790131455&#34;,&#34;11.390680357042926&#34;,&#34;11.426658387770571&#34;,&#34;11.43014825262898&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;308829737&#34;,&#34;btcPrice&#34;:&#34;0.000596677611303301&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3092345308&#34;,&#34;price&#34;:&#34;23.185639474431486&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.64&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;23.335615702172586&#34;,&#34;23.39585645274717&#34;,&#34;23.343279016192316&#34;,&#34;23.368532265681516&#34;,&#34;23.413515388525443&#34;,&#34;23.38620370811464&#34;,&#34;23.3754798851825&#34;,&#34;23.31520870717147&#34;,&#34;23.312234252886903&#34;,&#34;23.304028087116144&#34;,&#34;23.34200442793739&#34;,&#34;23.297930934925326&#34;,&#34;23.274354407066408&#34;,&#34;23.343288791058747&#34;,&#34;23.358723148053766&#34;,&#34;23.37637356506625&#34;,&#34;23.40620946666411&#34;,&#34;23.394078174648286&#34;,&#34;23.378417976570752&#34;,&#34;23.361233249800147&#34;,&#34;23.363735283581683&#34;,&#34;23.28477417926353&#34;,&#34;23.24637984996518&#34;,&#34;23.237371449181385&#34;,&#34;23.191369839833786&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;39715163&#34;,&#34;btcPrice&#34;:&#34;0.001214698707050255&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;2660148646&#34;,&#34;price&#34;:&#34;22.870545920392892&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.60&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;24.00416430577118&#34;,&#34;24.127476663248583&#34;,&#34;24.0824308125669&#34;,&#34;24.104157947932247&#34;,&#34;24.16502645546883&#34;,&#34;24.114620805655562&#34;,&#34;24.117207328736235&#34;,&#34;23.971278808572933&#34;,&#34;23.91743453694318&#34;,&#34;23.837699706737112&#34;,&#34;23.86019593203877&#34;,&#34;23.766258878276165&#34;,&#34;23.703595841142135&#34;,&#34;23.80097284169614&#34;,&#34;23.92757540808804&#34;,&#34;23.916206031318357&#34;,&#34;23.909573401385565&#34;,&#34;23.908507931691886&#34;,&#34;23.852137700158874&#34;,&#34;23.815928848864107&#34;,&#34;23.857280090393818&#34;,&#34;23.620729761965578&#34;,&#34;23.171004092169696&#34;,&#34;23.2276587013627&#34;,&#34;23.06970496752112&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;532197499&#34;,&#34;btcPrice&#34;:&#34;0.001198190914236835&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2597216666&#34;,&#34;price&#34;:&#34;142.81019136315027&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.97&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;145.7287933013975&#34;,&#34;145.90779207980776&#34;,&#34;145.74842550802893&#34;,&#34;146.3330061848262&#34;,&#34;146.33739354826403&#34;,&#34;145.6098365301342&#34;,&#34;144.86988303749882&#34;,&#34;143.8173517982758&#34;,&#34;143.56882951042058&#34;,&#34;143.53133261640673&#34;,&#34;143.3522882693263&#34;,&#34;143.2798087841838&#34;,&#34;143.09407972608125&#34;,&#34;143.09547724896066&#34;,&#34;143.47497726576484&#34;,&#34;143.81202031367957&#34;,&#34;144.22866691205104&#34;,&#34;144.63718655821282&#34;,&#34;145.25705847065854&#34;,&#34;145.0435274840397&#34;,&#34;144.77066967309332&#34;,&#34;143.62079666186744&#34;,&#34;142.0592791459734&#34;,&#34;142.58909072553894&#34;,&#34;143.2110682643405&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;101499188&#34;,&#34;btcPrice&#34;:&#34;0.007481844742463011&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2282809980&#34;,&#34;price&#34;:&#34;0.11297950147486376&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.71&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;0.11611478410975387&#34;,&#34;0.11624286846198124&#34;,&#34;0.11619342120478589&#34;,&#34;0.11620060011109687&#34;,&#34;0.11643232625474582&#34;,&#34;0.11661272751708227&#34;,&#34;0.11625223394832375&#34;,&#34;0.11552817612980673&#34;,&#34;0.11568370111927255&#34;,&#34;0.11563603252963502&#34;,&#34;0.11594746838386884&#34;,&#34;0.11607138144901112&#34;,&#34;0.11565934516325185&#34;,&#34;0.1160311576362536&#34;,&#34;0.11615485474992364&#34;,&#34;0.11616666869344804&#34;,&#34;0.11610549265236536&#34;,&#34;0.11621311333482921&#34;,&#34;0.11624833815781077&#34;,&#34;0.11630038528766233&#34;,&#34;0.11554948913696624&#34;,&#34;0.11447198015482822&#34;,&#34;0.11332511572086094&#34;,&#34;0.11360195239444003&#34;,&#34;0.11325359450590937&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;147398329&#34;,&#34;btcPrice&#34;:&#34;0.000005919010968666&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2139672684&#34;,&#34;price&#34;:&#34;0.3044291206613805&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.84&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;0.3171751935403727&#34;,&#34;0.31868288308103904&#34;,&#34;0.3180363460039525&#34;,&#34;0.31914884901722557&#34;,&#34;0.3198278899105449&#34;,&#34;0.3189463600564082&#34;,&#34;0.31801318402949197&#34;,&#34;0.3164322517159824&#34;,&#34;0.31634616664699483&#34;,&#34;0.3158157059524053&#34;,&#34;0.3166698244144793&#34;,&#34;0.3158542911766765&#34;,&#34;0.3140263786708132&#34;,&#34;0.3143248699716875&#34;,&#34;0.31493855174367924&#34;,&#34;0.3150638824211092&#34;,&#34;0.31538670998343094&#34;,&#34;0.31547723421065144&#34;,&#34;0.3146504477694023&#34;,&#34;0.3134381079908639&#34;,&#34;0.31154817881760205&#34;,&#34;0.3083431887709445&#34;,&#34;0.3046197484202268&#34;,&#34;0.30556880395481134&#34;,&#34;0.3050730514767288&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;96479134&#34;,&#34;btcPrice&#34;:&#34;0.000015949081743621&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2112919731&#34;,&#34;price&#34;:&#34;110.4425051427835&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.90&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;111.73437615563009&#34;,&#34;112.05725329948744&#34;,&#34;111.60603635903207&#34;,&#34;111.7697028811233&#34;,&#34;112.04776217638138&#34;,&#34;111.99840851873293&#34;,&#34;111.99704550802772&#34;,&#34;111.82375624318325&#34;,&#34;111.92725138901154&#34;,&#34;111.9222845296837&#34;,&#34;112.13909131394223&#34;,&#34;112.0067009084468&#34;,&#34;111.80216410154186&#34;,&#34;111.7538569242065&#34;,&#34;111.80374408873234&#34;,&#34;111.97436300369894&#34;,&#34;112.06881554015509&#34;,&#34;112.16916986534609&#34;,&#34;112.07308346020149&#34;,&#34;111.86443346015463&#34;,&#34;112.17046089377399&#34;,&#34;111.18202486957627&#34;,&#34;110.54918982260733&#34;,&#34;111.1692546221353&#34;,&#34;110.77605925037652&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;209162090&#34;,&#34;btcPrice&#34;:&#34;0.005786097396548934&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2030043729&#34;,&#34;price&#34;:&#34;0.10056131470511871&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.25&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;0.10212754506615787&#34;,&#34;0.10250011352438512&#34;,&#34;0.10230166180390267&#34;,&#34;0.10233477595357236&#34;,&#34;0.10287174471235619&#34;,&#34;0.10285755211277682&#34;,&#34;0.10256575233830766&#34;,&#34;0.10229324951075007&#34;,&#34;0.1021421465874546&#34;,&#34;0.10219273959587849&#34;,&#34;0.102244584995498&#34;,&#34;0.10207235814451604&#34;,&#34;0.10185791069945645&#34;,&#34;0.10193062535218834&#34;,&#34;0.10206151278836766&#34;,&#34;0.10200064519432812&#34;,&#34;0.10227780133735762&#34;,&#34;0.102363940583907&#34;,&#34;0.10218891079078159&#34;,&#34;0.10195156034543958&#34;,&#34;0.1017818128183007&#34;,&#34;0.10124541685754199&#34;,&#34;0.10071819595798079&#34;,&#34;0.10069117654763317&#34;,&#34;0.10067255501599817&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;24345153&#34;,&#34;btcPrice&#34;:&#34;0.000005268420527555&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1839357920&#34;,&#34;price&#34;:&#34;0.000279140477695159&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.40&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;0.000285329644418748&#34;,&#34;0.00029535507202863&#34;,&#34;0.000291129695919424&#34;,&#34;0.000292139329760707&#34;,&#34;0.000292287463659115&#34;,&#34;0.000291100420932035&#34;,&#34;0.000288268201358365&#34;,&#34;0.00028473022987627&#34;,&#34;0.000286210975380309&#34;,&#34;0.000284831289713184&#34;,&#34;0.000287472708467729&#34;,&#34;0.000285775177511868&#34;,&#34;0.000285023202994829&#34;,&#34;0.000285661728427689&#34;,&#34;0.000285340015964695&#34;,&#34;0.000284687356311886&#34;,&#34;0.000283891165335218&#34;,&#34;0.000284921632187455&#34;,&#34;0.000286216843456204&#34;,&#34;0.000286750490501763&#34;,&#34;0.000287780560524145&#34;,&#34;0.000288170213930347&#34;,&#34;0.000285423141890913&#34;,&#34;0.0002838001225246&#34;,&#34;0.00027997171481088&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;436962647&#34;,&#34;btcPrice&#34;:&#34;1.4624206407e-8&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;1819786388&#34;,&#34;price&#34;:&#34;2.993836238275153&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.97&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;3.1887270901594222&#34;,&#34;3.2030257852211608&#34;,&#34;3.196273790133135&#34;,&#34;3.1974950109880718&#34;,&#34;3.1997486603568017&#34;,&#34;3.1970318233153576&#34;,&#34;3.193563855129808&#34;,&#34;3.1719219094597766&#34;,&#34;3.1722443364492006&#34;,&#34;3.166371783783162&#34;,&#34;3.1703251025748735&#34;,&#34;3.157711001583678&#34;,&#34;3.1507920949983426&#34;,&#34;3.152759717650104&#34;,&#34;3.156489417497949&#34;,&#34;3.160152572659337&#34;,&#34;3.164624358349841&#34;,&#34;3.169529116120824&#34;,&#34;3.1616468644486093&#34;,&#34;3.1544028390218446&#34;,&#34;3.1472779766470427&#34;,&#34;3.1005884130624923&#34;,&#34;3.053216635035266&#34;,&#34;3.041963346806925&#34;,&#34;3.0209615891415287&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;228679178&#34;,&#34;btcPrice&#34;:&#34;0.0001568474749969&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1687308186&#34;,&#34;price&#34;:&#34;16.87308186223951&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.60&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;16.445714715980703&#34;,&#34;16.551713511939443&#34;,&#34;16.610489562624846&#34;,&#34;16.648462917736495&#34;,&#34;16.81131564800994&#34;,&#34;16.88693332038903&#34;,&#34;16.999587135045022&#34;,&#34;17.221962040175093&#34;,&#34;17.269606457931914&#34;,&#34;17.2520286277383&#34;,&#34;17.31895697323482&#34;,&#34;17.249524102619546&#34;,&#34;17.291211183540963&#34;,&#34;17.28393819530163&#34;,&#34;17.36270721540079&#34;,&#34;17.3685268343324&#34;,&#34;17.306957752119125&#34;,&#34;17.266446113452478&#34;,&#34;17.192651512572297&#34;,&#34;17.23372931625003&#34;,&#34;17.254066198201613&#34;,&#34;16.99531502776686&#34;,&#34;16.892829629105968&#34;,&#34;16.906987601108533&#34;,&#34;16.853938175308137&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;7126530&#34;,&#34;btcPrice&#34;:&#34;0.000883985962362997&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1609644684&#34;,&#34;price&#34;:&#34;1.6096446841259688&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.78&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;1.702569755706722&#34;,&#34;1.70476377862634&#34;,&#34;1.6835678663995453&#34;,&#34;1.6838526904284539&#34;,&#34;1.6947507975666016&#34;,&#34;1.6879437904260108&#34;,&#34;1.6843935323983708&#34;,&#34;1.6855790999134808&#34;,&#34;1.6846357247698256&#34;,&#34;1.6931006320296096&#34;,&#34;1.6902359989606028&#34;,&#34;1.6910838825551893&#34;,&#34;1.6899440681189206&#34;,&#34;1.6909170432292737&#34;,&#34;1.6920078326239052&#34;,&#34;1.6871504935378507&#34;,&#34;1.6852726648599505&#34;,&#34;1.685592539536627&#34;,&#34;1.6789184070809202&#34;,&#34;1.6744220568671229&#34;,&#34;1.6541122981037557&#34;,&#34;1.6299431127234052&#34;,&#34;1.6135100480888152&#34;,&#34;1.6173203492119752&#34;,&#34;1.6189300429691023&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;44968193&#34;,&#34;btcPrice&#34;:&#34;0.000084329497091262&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1548948375&#34;,&#34;price&#34;:&#34;1.4948353359974944&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.06&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;1.5599141576332385&#34;,&#34;1.5643130662207727&#34;,&#34;1.5641334626234142&#34;,&#34;1.5687913966841125&#34;,&#34;1.5759339874735767&#34;,&#34;1.5745447148522929&#34;,&#34;1.5726760909727147&#34;,&#34;1.5601948609880432&#34;,&#34;1.5614578874483802&#34;,&#34;1.5567814548032304&#34;,&#34;1.5604146925006783&#34;,&#34;1.5555925666968435&#34;,&#34;1.550228270355156&#34;,&#34;1.5549957378529777&#34;,&#34;1.5560396363653726&#34;,&#34;1.5541240563417866&#34;,&#34;1.5544250415007177&#34;,&#34;1.5576440531622393&#34;,&#34;1.5589514812963414&#34;,&#34;1.5573328111820177&#34;,&#34;1.5527453269274585&#34;,&#34;1.5299015652120604&#34;,&#34;1.5074148974768866&#34;,&#34;1.5052770786848717&#34;,&#34;1.4984393451358997&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;25152215&#34;,&#34;btcPrice&#34;:&#34;0.000078314620215309&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1524444779&#34;,&#34;price&#34;:&#34;0.06261594723177151&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.79&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;0.0633129137996663&#34;,&#34;0.06346583595168086&#34;,&#34;0.06349099288131063&#34;,&#34;0.06350261581818628&#34;,&#34;0.06386531474082693&#34;,&#34;0.06471361653190763&#34;,&#34;0.06552388228316676&#34;,&#34;0.06563441104979335&#34;,&#34;0.0654506388156204&#34;,&#34;0.06479551602983948&#34;,&#34;0.06501667928110343&#34;,&#34;0.06548016318002928&#34;,&#34;0.06556970114836601&#34;,&#34;0.06577189507340953&#34;,&#34;0.06600097211867949&#34;,&#34;0.06642201036402498&#34;,&#34;0.06655829140102525&#34;,&#34;0.06591811648135437&#34;,&#34;0.06580357004104936&#34;,&#34;0.06619196275064149&#34;,&#34;0.06462443508087336&#34;,&#34;0.0638981761544154&#34;,&#34;0.06377020018050712&#34;,&#34;0.06368081170424733&#34;,&#34;0.06314349716379733&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;223252938&#34;,&#34;btcPrice&#34;:&#34;0.000003280457725871&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1504454506&#34;,&#34;price&#34;:&#34;5.0587488517882235&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.02&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;5.1686388497766504&#34;,&#34;5.191606874568098&#34;,&#34;5.187298065654669&#34;,&#34;5.186536267017284&#34;,&#34;5.203632375757242&#34;,&#34;5.202869429152412&#34;,&#34;5.192912458065749&#34;,&#34;5.172791523041162&#34;,&#34;5.1818732241345815&#34;,&#34;5.173953827540303&#34;,&#34;5.1868018046030056&#34;,&#34;5.14390933681308&#34;,&#34;5.122213733101893&#34;,&#34;5.1302269254335044&#34;,&#34;5.136352769683806&#34;,&#34;5.145086254253208&#34;,&#34;5.1488453558479055&#34;,&#34;5.149971330325745&#34;,&#34;5.148920731695201&#34;,&#34;5.147121280465226&#34;,&#34;5.146712977175991&#34;,&#34;5.105948841753626&#34;,&#34;5.073242337484015&#34;,&#34;5.083456455027121&#34;,&#34;5.074873027149178&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;105040972&#34;,&#34;btcPrice&#34;:&#34;0.000265028518895737&#34;},{&#34;uuid&#34;:&#34;DXwP4wF9ksbBO&#34;,&#34;symbol&#34;:&#34;HT&#34;,&#34;name&#34;:&#34;Huobi Token&#34;,&#34;color&#34;:&#34;#2daadf&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryFpQe0c7/ht.svg&#34;,&#34;marketCap&#34;:&#34;1497747855&#34;,&#34;price&#34;:&#34;7.30959391726921&#34;,&#34;listedAt&#34;:1517702400,&#34;tier&#34;:1,&#34;change&#34;:&#34;11.29&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;6.551395122417918&#34;,&#34;6.498353733438137&#34;,&#34;6.449494398556883&#34;,&#34;6.5044808630572675&#34;,&#34;6.489564773753065&#34;,&#34;6.478895677790284&#34;,&#34;6.2787473917198104&#34;,&#34;6.240209103307563&#34;,&#34;6.296363665889593&#34;,&#34;6.342764461015115&#34;,&#34;6.275708659742857&#34;,&#34;6.516147462920048&#34;,&#34;6.4893552297829125&#34;,&#34;6.469098012814509&#34;,&#34;6.524485727810331&#34;,&#34;6.563844416379591&#34;,&#34;6.617508505551867&#34;,&#34;6.97128085167234&#34;,&#34;7.110328703336429&#34;,&#34;7.315424458123404&#34;,&#34;7.467401237015303&#34;,&#34;7.448148003620864&#34;,&#34;7.448629677934976&#34;,&#34;7.371370758861538&#34;,&#34;7.2485497987119425&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DXwP4wF9ksbBO+huobitoken-ht&#34;,&#34;24hVolume&#34;:&#34;78328961&#34;,&#34;btcPrice&#34;:&#34;0.000382950588451994&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1493825967&#34;,&#34;price&#34;:&#34;152.78612147861034&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.53&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;155.57974055035396&#34;,&#34;155.11178656377845&#34;,&#34;154.06189658753706&#34;,&#34;154.8654228847202&#34;,&#34;154.89760527715066&#34;,&#34;156.13970895996286&#34;,&#34;156.90401660169792&#34;,&#34;156.96969824653988&#34;,&#34;155.7987307283559&#34;,&#34;155.78013169298205&#34;,&#34;155.89837311953403&#34;,&#34;154.87189999386888&#34;,&#34;154.87657138005693&#34;,&#34;155.50668232732454&#34;,&#34;155.59957927199446&#34;,&#34;155.05371686801757&#34;,&#34;154.90599239068652&#34;,&#34;154.54837070527844&#34;,&#34;154.06418397991587&#34;,&#34;154.11472708202476&#34;,&#34;155.15433091980793&#34;,&#34;155.16706933566317&#34;,&#34;154.10613712423773&#34;,&#34;153.79343149111446&#34;,&#34;153.5109290738616&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;87819229&#34;,&#34;btcPrice&#34;:&#34;0.008004485035659849&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1479776812&#34;,&#34;price&#34;:&#34;0.022165374184944554&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.90&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.022844769401618756&#34;,&#34;0.022936872826188528&#34;,&#34;0.02290310267268389&#34;,&#34;0.022936065192376145&#34;,&#34;0.022980138933279198&#34;,&#34;0.02289436776644236&#34;,&#34;0.02285669728728095&#34;,&#34;0.022760094254382357&#34;,&#34;0.022723422848929038&#34;,&#34;0.022688012896856326&#34;,&#34;0.0227080871889233&#34;,&#34;0.022668727423292952&#34;,&#34;0.02260704393727484&#34;,&#34;0.02267996506143344&#34;,&#34;0.02273031239486227&#34;,&#34;0.022797633048894116&#34;,&#34;0.022861260177265946&#34;,&#34;0.022837723366180063&#34;,&#34;0.02281548915390685&#34;,&#34;0.022795941826127715&#34;,&#34;0.02275543775896526&#34;,&#34;0.02259467729851517&#34;,&#34;0.022254405366707405&#34;,&#34;0.022226502357719953&#34;,&#34;0.022203673658163888&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;75118666&#34;,&#34;btcPrice&#34;:&#34;0.000001161246874102&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1377458685&#34;,&#34;price&#34;:&#34;0.6279746977505206&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.06&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.655502307299186&#34;,&#34;0.657805185456491&#34;,&#34;0.656425030003748&#34;,&#34;0.6566044773454645&#34;,&#34;0.6581408198549763&#34;,&#34;0.656908144585799&#34;,&#34;0.6563919278545015&#34;,&#34;0.6527193642309664&#34;,&#34;0.6524082202023858&#34;,&#34;0.651052418169492&#34;,&#34;0.6522449025256555&#34;,&#34;0.6505284391321423&#34;,&#34;0.6484453685146951&#34;,&#34;0.6490982996068095&#34;,&#34;0.649621138017031&#34;,&#34;0.6492115081966688&#34;,&#34;0.6498596090487501&#34;,&#34;0.6500105220065829&#34;,&#34;0.6486719688041056&#34;,&#34;0.6480143735716669&#34;,&#34;0.645314421892347&#34;,&#34;0.6379475070878058&#34;,&#34;0.6290344539435647&#34;,&#34;0.6297625333084507&#34;,&#34;0.6294351086413272&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;102324461&#34;,&#34;btcPrice&#34;:&#34;0.000032899677158313&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1360095504&#34;,&#34;price&#34;:&#34;0.9996227504728086&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.06&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;0.9995382695634664&#34;,&#34;0.9996036221317856&#34;,&#34;0.9992333445293856&#34;,&#34;0.9988353154281091&#34;,&#34;0.9984478858836998&#34;,&#34;0.9995934543264151&#34;,&#34;0.9994628233637075&#34;,&#34;1.0003929716081927&#34;,&#34;0.9996813509599904&#34;,&#34;0.9995067714969614&#34;,&#34;0.9991386793998077&#34;,&#34;0.9994730272643229&#34;,&#34;0.9993773031181682&#34;,&#34;0.9988052178342136&#34;,&#34;0.9991677766850943&#34;,&#34;0.9989948605315864&#34;,&#34;0.998701622351035&#34;,&#34;0.9989406168854776&#34;,&#34;0.9996142672966629&#34;,&#34;0.9993029757410802&#34;,&#34;0.9991678189321344&#34;,&#34;0.9998696890108068&#34;,&#34;1.0004750657850388&#34;,&#34;0.9996320700614548&#34;,&#34;0.9996164529455654&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;5156265&#34;,&#34;btcPrice&#34;:&#34;0.000052371112460594&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1319604870&#34;,&#34;price&#34;:&#34;4.924311526800767&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;-6.50&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;5.268758240783529&#34;,&#34;5.2833097914399305&#34;,&#34;5.2790254999526525&#34;,&#34;5.284029080641403&#34;,&#34;5.285961760295096&#34;,&#34;5.28026273798667&#34;,&#34;5.282065397154765&#34;,&#34;5.209856048877726&#34;,&#34;5.2056924507547855&#34;,&#34;5.177529810286326&#34;,&#34;5.191561627630635&#34;,&#34;5.052365064779351&#34;,&#34;5.05037123505905&#34;,&#34;5.06503925962464&#34;,&#34;5.057545346827491&#34;,&#34;5.039978101909845&#34;,&#34;5.05675852637295&#34;,&#34;5.056114976922128&#34;,&#34;5.058387734444493&#34;,&#34;5.08358635163762&#34;,&#34;5.080167710430085&#34;,&#34;4.9925089177698565&#34;,&#34;4.921219272883152&#34;,&#34;4.954151868052775&#34;,&#34;4.951926737837141&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;63771266&#34;,&#34;btcPrice&#34;:&#34;0.000257985329725922&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1303352711&#34;,&#34;price&#34;:&#34;0.6516763553805149&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-5.28&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;0.6885824447604832&#34;,&#34;0.6903144515257721&#34;,&#34;0.688036553225407&#34;,&#34;0.6879528617281385&#34;,&#34;0.6886321744940216&#34;,&#34;0.6851653244642348&#34;,&#34;0.6823220490818384&#34;,&#34;0.6762676500712743&#34;,&#34;0.6751233561678406&#34;,&#34;0.6733165970309736&#34;,&#34;0.6749129491200637&#34;,&#34;0.6716138024754166&#34;,&#34;0.666312791939217&#34;,&#34;0.6675438600086278&#34;,&#34;0.6681262076275052&#34;,&#34;0.6692212257778982&#34;,&#34;0.6692846393300993&#34;,&#34;0.6677013183566424&#34;,&#34;0.6661955685614352&#34;,&#34;0.6668235404267279&#34;,&#34;0.6654795720259506&#34;,&#34;0.6520638841201846&#34;,&#34;0.6444356337221383&#34;,&#34;0.6480626490219007&#34;,&#34;0.6514269072570206&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;18397561&#34;,&#34;btcPrice&#34;:&#34;0.000034141410124525&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1265717108&#34;,&#34;price&#34;:&#34;53.49681778914123&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.26&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;56.13954128666611&#34;,&#34;56.030442226273664&#34;,&#34;55.54824291141705&#34;,&#34;55.53189312082467&#34;,&#34;55.45299905254239&#34;,&#34;55.14827585361149&#34;,&#34;55.24220318929038&#34;,&#34;55.10542116223034&#34;,&#34;55.2072467211333&#34;,&#34;55.34719727187107&#34;,&#34;55.71429455538601&#34;,&#34;55.556828163284436&#34;,&#34;55.57062151104551&#34;,&#34;55.597396803210266&#34;,&#34;55.59328155657506&#34;,&#34;55.59484565427399&#34;,&#34;55.54883950816091&#34;,&#34;55.45475998527977&#34;,&#34;55.51636727421482&#34;,&#34;55.684290786393674&#34;,&#34;55.9851653648603&#34;,&#34;55.65357300493677&#34;,&#34;54.95669248652122&#34;,&#34;54.957087479129335&#34;,&#34;54.59665866701713&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;51090299&#34;,&#34;btcPrice&#34;:&#34;0.002802705332817494&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1208495825&#34;,&#34;price&#34;:&#34;1.3306691838285076&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.41&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;1.3510634295810173&#34;,&#34;1.356359952548885&#34;,&#34;1.352673020554655&#34;,&#34;1.3555531482203775&#34;,&#34;1.3596470092933337&#34;,&#34;1.3584553427706747&#34;,&#34;1.3567258890689875&#34;,&#34;1.3492001806313916&#34;,&#34;1.3499544400348797&#34;,&#34;1.3481133395639728&#34;,&#34;1.3527621157154128&#34;,&#34;1.351096480202286&#34;,&#34;1.3469250709112197&#34;,&#34;1.3471773924284434&#34;,&#34;1.3520998899696197&#34;,&#34;1.3545873244124111&#34;,&#34;1.3585349969639813&#34;,&#34;1.3577621851516746&#34;,&#34;1.3561270344181133&#34;,&#34;1.3525286407330386&#34;,&#34;1.350228964239185&#34;,&#34;1.3372217965448283&#34;,&#34;1.3216863548371327&#34;,&#34;1.3252900766131754&#34;,&#34;1.3294338928425338&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;16509395&#34;,&#34;btcPrice&#34;:&#34;0.000069713933872326&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1127809808&#34;,&#34;price&#34;:&#34;0.7500380086801673&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.03&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.7822325736043189&#34;,&#34;0.7856551705123902&#34;,&#34;0.7832522989611527&#34;,&#34;0.7841082192113981&#34;,&#34;0.7858847715753987&#34;,&#34;0.7851862332149775&#34;,&#34;0.7842235132205547&#34;,&#34;0.7804022428313266&#34;,&#34;0.7806742118540676&#34;,&#34;0.7790562005212737&#34;,&#34;0.7806273767114011&#34;,&#34;0.7801663026485026&#34;,&#34;0.7782699341061301&#34;,&#34;0.7789623188159341&#34;,&#34;0.7797239414922001&#34;,&#34;0.7800810055293154&#34;,&#34;0.7812721854214757&#34;,&#34;0.7813716726769663&#34;,&#34;0.7801782558890346&#34;,&#34;0.778792039796585&#34;,&#34;0.7768769734884189&#34;,&#34;0.7670381571508554&#34;,&#34;0.7511379122994393&#34;,&#34;0.7514784359435827&#34;,&#34;0.7518462476240504&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;57269215&#34;,&#34;btcPrice&#34;:&#34;0.000039294590101216&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1092541796&#34;,&#34;price&#34;:&#34;0.18390257536173799&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;-4.49&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;0.19294454833347924&#34;,&#34;0.19328246767740603&#34;,&#34;0.19237706812529798&#34;,&#34;0.19254974590732474&#34;,&#34;0.19352157161015413&#34;,&#34;0.19291737183301902&#34;,&#34;0.19146929910483074&#34;,&#34;0.1905702029605244&#34;,&#34;0.19102809443585123&#34;,&#34;0.19016888724438874&#34;,&#34;0.19090819231275563&#34;,&#34;0.19037503069913247&#34;,&#34;0.18920874334887214&#34;,&#34;0.18984690139324303&#34;,&#34;0.19050410979564236&#34;,&#34;0.19088675084698134&#34;,&#34;0.19104675676032687&#34;,&#34;0.19119390134114722&#34;,&#34;0.1907578467288735&#34;,&#34;0.18990081282842128&#34;,&#34;0.18903627527450792&#34;,&#34;0.18620829807424824&#34;,&#34;0.18387031823547179&#34;,&#34;0.18405264913695932&#34;,&#34;0.18408780316773135&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;220238366&#34;,&#34;btcPrice&#34;:&#34;0.000009634680154561&#34;},{&#34;uuid&#34;:&#34;JCKLgWPAF&#34;,&#34;symbol&#34;:&#34;USDP&#34;,&#34;name&#34;:&#34;Pax Dollar&#34;,&#34;color&#34;:&#34;#2ac27a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KUd2bJXdn/3330.png&#34;,&#34;marketCap&#34;:&#34;1013731501&#34;,&#34;price&#34;:&#34;0.9978185729334482&#34;,&#34;listedAt&#34;:1650960626,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.10&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;0.9987353268055269&#34;,&#34;0.99909519991158&#34;,&#34;0.9990028668665214&#34;,&#34;0.9985619853031852&#34;,&#34;0.9982889398207389&#34;,&#34;0.9993704214760647&#34;,&#34;0.9992872073449666&#34;,&#34;1.0003003884901698&#34;,&#34;0.9997009251527409&#34;,&#34;0.999709190342883&#34;,&#34;0.9982062605041606&#34;,&#34;0.998431864009877&#34;,&#34;0.9983629092393211&#34;,&#34;0.9975929459617635&#34;,&#34;0.9970472255916373&#34;,&#34;0.9961970274069836&#34;,&#34;0.9958745900566888&#34;,&#34;0.9962144022273222&#34;,&#34;0.9967947600450411&#34;,&#34;0.9967524066121013&#34;,&#34;0.9969378455069499&#34;,&#34;0.9990103930863189&#34;,&#34;0.9992093133449629&#34;,&#34;0.9980914516886218&#34;,&#34;0.9979373573723535&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/JCKLgWPAF+paxdollar-usdp&#34;,&#34;24hVolume&#34;:&#34;133701764&#34;,&#34;btcPrice&#34;:&#34;0.000052275846510492&#34;},{&#34;uuid&#34;:&#34;iAzbfXiBBKkR6&#34;,&#34;symbol&#34;:&#34;EOS&#34;,&#34;name&#34;:&#34;EOS&#34;,&#34;color&#34;:&#34;#443f54&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/PqOYrWSje/eos2.svg&#34;,&#34;marketCap&#34;:&#34;1004230457&#34;,&#34;price&#34;:&#34;1.0158979090799296&#34;,&#34;listedAt&#34;:1498694400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.85&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;1.0467250559551784&#34;,&#34;1.0509274966513917&#34;,&#34;1.0484915518815356&#34;,&#34;1.048318055668925&#34;,&#34;1.0511793760732397&#34;,&#34;1.0503386533902546&#34;,&#34;1.051573346542282&#34;,&#34;1.0456616853386471&#34;,&#34;1.0446438287503501&#34;,&#34;1.04143527768362&#34;,&#34;1.0438809176510062&#34;,&#34;1.0403208666298578&#34;,&#34;1.035643174440866&#34;,&#34;1.0333987468072896&#34;,&#34;1.0362493851135732&#34;,&#34;1.0379282590289705&#34;,&#34;1.0382471353340343&#34;,&#34;1.037678967722461&#34;,&#34;1.0385837415268895&#34;,&#34;1.039278128023783&#34;,&#34;1.0386935745031391&#34;,&#34;1.028127551968946&#34;,&#34;1.0169936994258908&#34;,&#34;1.0190315736529612&#34;,&#34;1.0189823330807801&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos&#34;,&#34;24hVolume&#34;:&#34;151005542&#34;,&#34;btcPrice&#34;:&#34;0.000053223025313375&#34;}]}} BTC Bitcoin 19087.564134101154 ETH Ethereum 1285.2687649159172 USDT Tether USD 1.0002426352802434 USDC USDC 1.0001842392017035 BNB Binance Coin 269.2282069028177 XRP XRP 0.47053637545048793 BUSD Binance USD 1.000347401522267 ADA Cardano 0.3722910160714077 SOL Solana 30.650855742571498 DOGE Dogecoin 0.05879608357207651 DOT Polkadot 6.076480163125043 MATIC Polygon 0.7622684423622607 DAI Dai 1.0003099070659387 SHIB Shiba Inu 0.000009995133678276 TRX TRON 0.06175363394022226 WETH Wrapped Ether 1286.1604788767515 WBTC Wrapped BTC 19075.80943893763 AVAX Avalanche 15.536559461452313 UNI Uniswap 5.758114772582682 OKB OKB 16.752966087401443 CAKE PancakeSwap 4.386250093491571 LTC Litecoin 51.84406470389362 ATOM Cosmos 11.389122173134037 FTT FTX Token 23.185639474431486 ETC Ethereum Classic 22.870545920392892 XMR Monero 142.81019136315027 XLM Stellar 0.11297950147486376 ALGO Algorand 0.3044291206613805 BCH Bitcoin Cash 110.4425051427835 CRO Cronos 0.10056131470511871 LUNC Terra Classic 0.000279140477695159 NEAR NEAR Protocol 2.993836238275153 ENS EnergySwap 16.87308186223951 WEMIX WEMIX TOKEN 1.6096446841259688 FLOW Flow 1.4948353359974944 HBAR Hedera 0.06261594723177151 FIL Filecoin 5.0587488517882235 HT Huobi Token 7.30959391726921 QNT Quant 152.78612147861034 VET VeChain 0.022165374184944554 MANA Decentraland 0.6279746977505206 FRAX Frax 0.9996227504728086 ICP Internet Computer (DFINITY) 4.924311526800767 IMX Immutable X 0.6516763553805149 EGLD Elrond 53.49681778914123 XTZ Tezos 1.3306691838285076 SAND The Sandbox 0.7500380086801673 CHZ Chiliz 0.18390257536173799 USDP Pax Dollar 0.9978185729334482 EOS EOS 1.0158979090799296 . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;results&#39;: [{&#39;entity&#39;: {&#39;category&#39;: None, &#39;country&#39;: {&#39;alpha2&#39;: &#39;US&#39;, &#39;name&#39;: &#39;USA&#39;}, &#39;disabled&#39;: None, &#39;displayInverseHomeAwayTeams&#39;: None, &#39;firstName&#39;: &#39;&#39;, &#39;gender&#39;: None, &#39;id&#39;: 853680, &#39;lastName&#39;: &#39;&#39;, &#39;name&#39;: &#39;Tom Brady&#39;, &#39;nameCode&#39;: None, &#39;national&#39;: None, &#39;position&#39;: &#39;QB&#39;, &#39;ranking&#39;: None, &#39;shortName&#39;: &#39;T. Brady&#39;, &#39;slug&#39;: &#39;brady-tom&#39;, &#39;sport&#39;: None, &#39;team&#39;: {&#39;country&#39;: {&#39;alpha2&#39;: &#39;US&#39;, &#39;name&#39;: &#39;USA&#39;}, &#39;disabled&#39;: False, &#39;gender&#39;: &#39;M&#39;, &#39;id&#39;: 4388, &#39;name&#39;: &#39;Tampa Bay Buccaneers&#39;, &#39;nameCode&#39;: &#39;TBB&#39;, &#39;national&#39;: False, &#39;ranking&#39;: None, &#39;shortName&#39;: &#39;Tampa Bay Buccaneers&#39;, &#39;slug&#39;: &#39;tampa-bay-buccaneers&#39;, &#39;sport&#39;: {&#39;id&#39;: 63, &#39;name&#39;: &#39;American football&#39;, &#39;slug&#39;: &#39;american-football&#39;}, &#39;teamColors&#39;: {&#39;primary&#39;: &#39;#d50a0a&#39;, &#39;secondary&#39;: &#39;#34302b&#39;, &#39;text&#39;: &#39;#34302b&#39;}, &#39;type&#39;: 0, &#39;userCount&#39;: 14002}, &#39;teamColors&#39;: None, &#39;type&#39;: None, &#39;userCount&#39;: 10368}, &#39;score&#39;: 1271709, &#39;type&#39;: &#39;player&#39;}, {&#39;entity&#39;: {&#39;category&#39;: None, &#39;country&#39;: {&#39;alpha2&#39;: None, &#39;name&#39;: None}, &#39;disabled&#39;: None, &#39;displayInverseHomeAwayTeams&#39;: None, &#39;firstName&#39;: &#39;&#39;, &#39;gender&#39;: None, &#39;id&#39;: 1132339, &#39;lastName&#39;: &#39;&#39;, &#39;name&#39;: &#39;Brady Christensen&#39;, &#39;nameCode&#39;: None, &#39;national&#39;: None, &#39;position&#39;: &#39;OT&#39;, &#39;ranking&#39;: None, &#39;shortName&#39;: &#39;B. Christensen&#39;, &#39;slug&#39;: &#39;christensen-brady&#39;, &#39;sport&#39;: None, &#39;team&#39;: {&#39;country&#39;: {&#39;alpha2&#39;: &#39;US&#39;, &#39;name&#39;: &#39;USA&#39;}, &#39;disabled&#39;: None, &#39;gender&#39;: &#39;M&#39;, &#39;id&#39;: 4415, &#39;name&#39;: &#39;Carolina Panthers&#39;, &#39;nameCode&#39;: &#39;CAR&#39;, &#39;national&#39;: False, &#39;ranking&#39;: None, &#39;shortName&#39;: &#39;Carolina Panthers&#39;, &#39;slug&#39;: &#39;carolina-panthers&#39;, &#39;sport&#39;: {&#39;id&#39;: 63, &#39;name&#39;: &#39;American football&#39;, &#39;slug&#39;: &#39;american-football&#39;}, &#39;teamColors&#39;: {&#39;primary&#39;: &#39;#3a84c5&#39;, &#39;secondary&#39;: &#39;#07141e&#39;, &#39;text&#39;: &#39;#07141e&#39;}, &#39;type&#39;: 0, &#39;userCount&#39;: 2477}, &#39;teamColors&#39;: None, &#39;type&#39;: None, &#39;userCount&#39;: 2}, &#39;score&#39;: 205, &#39;type&#39;: &#39;player&#39;}, {&#39;entity&#39;: {&#39;category&#39;: None, &#39;country&#39;: {&#39;alpha2&#39;: &#39;US&#39;, &#39;name&#39;: &#39;USA&#39;}, &#39;disabled&#39;: None, &#39;displayInverseHomeAwayTeams&#39;: None, &#39;firstName&#39;: None, &#39;gender&#39;: None, &#39;id&#39;: 887887, &#39;lastName&#39;: None, &#39;name&#39;: &#39;Brady Sheldon&#39;, &#39;nameCode&#39;: None, &#39;national&#39;: None, &#39;position&#39;: &#39;LB&#39;, &#39;ranking&#39;: None, &#39;shortName&#39;: &#39;B. Sheldon&#39;, &#39;slug&#39;: &#39;sheldon-brady&#39;, &#39;sport&#39;: None, &#39;team&#39;: {&#39;country&#39;: {&#39;alpha2&#39;: None, &#39;name&#39;: None}, &#39;disabled&#39;: True, &#39;gender&#39;: None, &#39;id&#39;: 273134, &#39;name&#39;: &#39;No team&#39;, &#39;nameCode&#39;: &#39;NTE&#39;, &#39;national&#39;: False, &#39;ranking&#39;: None, &#39;shortName&#39;: &#39;No team&#39;, &#39;slug&#39;: &#39;no-team&#39;, &#39;sport&#39;: {&#39;id&#39;: 63, &#39;name&#39;: &#39;American football&#39;, &#39;slug&#39;: &#39;american-football&#39;}, &#39;teamColors&#39;: {&#39;primary&#39;: &#39;#52b030&#39;, &#39;secondary&#39;: &#39;#52b030&#39;, &#39;text&#39;: &#39;#ffffff&#39;}, &#39;type&#39;: 0, &#39;userCount&#39;: 0}, &#39;teamColors&#39;: None, &#39;type&#39;: None, &#39;userCount&#39;: 0}, &#39;score&#39;: 0, &#39;type&#39;: &#39;player&#39;}, {&#39;entity&#39;: {&#39;category&#39;: None, &#39;country&#39;: {&#39;alpha2&#39;: None, &#39;name&#39;: None}, &#39;disabled&#39;: None, &#39;displayInverseHomeAwayTeams&#39;: None, &#39;firstName&#39;: None, &#39;gender&#39;: None, &#39;id&#39;: 984311, &#39;lastName&#39;: None, &#39;name&#39;: &#39;Tyre Brady&#39;, &#39;nameCode&#39;: None, &#39;national&#39;: None, &#39;position&#39;: &#39;WR&#39;, &#39;ranking&#39;: None, &#39;shortName&#39;: &#39;T. Brady&#39;, &#39;slug&#39;: &#39;brady-tyre&#39;, &#39;sport&#39;: None, &#39;team&#39;: {&#39;country&#39;: {&#39;alpha2&#39;: None, &#39;name&#39;: None}, &#39;disabled&#39;: True, &#39;gender&#39;: None, &#39;id&#39;: 273134, &#39;name&#39;: &#39;No team&#39;, &#39;nameCode&#39;: &#39;NTE&#39;, &#39;national&#39;: False, &#39;ranking&#39;: None, &#39;shortName&#39;: &#39;No team&#39;, &#39;slug&#39;: &#39;no-team&#39;, &#39;sport&#39;: {&#39;id&#39;: 63, &#39;name&#39;: &#39;American football&#39;, &#39;slug&#39;: &#39;american-football&#39;}, &#39;teamColors&#39;: {&#39;primary&#39;: &#39;#52b030&#39;, &#39;secondary&#39;: &#39;#52b030&#39;, &#39;text&#39;: &#39;#ffffff&#39;}, &#39;type&#39;: 0, &#39;userCount&#39;: 0}, &#39;teamColors&#39;: None, &#39;type&#39;: None, &#39;userCount&#39;: 0}, &#39;score&#39;: 0, &#39;type&#39;: &#39;player&#39;}]} . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. . import requests url = &quot;https://americanfootballapi.p.rapidapi.com/api/american-football/search/brady&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;a887a57462msh889608deb83b3ddp11d368jsnce0092f67d7a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;americanfootballapi.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . {&#34;results&#34;:[{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:&#34;&#34;,&#34;gender&#34;:null,&#34;id&#34;:853680,&#34;lastName&#34;:&#34;&#34;,&#34;name&#34;:&#34;Tom Brady&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;QB&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;T. Brady&#34;,&#34;slug&#34;:&#34;brady-tom&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:false,&#34;gender&#34;:&#34;M&#34;,&#34;id&#34;:4388,&#34;name&#34;:&#34;Tampa Bay Buccaneers&#34;,&#34;nameCode&#34;:&#34;TBB&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;Tampa Bay Buccaneers&#34;,&#34;slug&#34;:&#34;tampa-bay-buccaneers&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#d50a0a&#34;,&#34;secondary&#34;:&#34;#34302b&#34;,&#34;text&#34;:&#34;#34302b&#34;},&#34;type&#34;:0,&#34;userCount&#34;:14002},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:10368},&#34;score&#34;:1271709,&#34;type&#34;:&#34;player&#34;},{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:&#34;&#34;,&#34;gender&#34;:null,&#34;id&#34;:1132339,&#34;lastName&#34;:&#34;&#34;,&#34;name&#34;:&#34;Brady Christensen&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;OT&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;B. Christensen&#34;,&#34;slug&#34;:&#34;christensen-brady&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:null,&#34;gender&#34;:&#34;M&#34;,&#34;id&#34;:4415,&#34;name&#34;:&#34;Carolina Panthers&#34;,&#34;nameCode&#34;:&#34;CAR&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;Carolina Panthers&#34;,&#34;slug&#34;:&#34;carolina-panthers&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#3a84c5&#34;,&#34;secondary&#34;:&#34;#07141e&#34;,&#34;text&#34;:&#34;#07141e&#34;},&#34;type&#34;:0,&#34;userCount&#34;:2477},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:2},&#34;score&#34;:205,&#34;type&#34;:&#34;player&#34;},{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:null,&#34;gender&#34;:null,&#34;id&#34;:887887,&#34;lastName&#34;:null,&#34;name&#34;:&#34;Brady Sheldon&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;LB&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;B. Sheldon&#34;,&#34;slug&#34;:&#34;sheldon-brady&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:true,&#34;gender&#34;:null,&#34;id&#34;:273134,&#34;name&#34;:&#34;No team&#34;,&#34;nameCode&#34;:&#34;NTE&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;No team&#34;,&#34;slug&#34;:&#34;no-team&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#52b030&#34;,&#34;secondary&#34;:&#34;#52b030&#34;,&#34;text&#34;:&#34;#ffffff&#34;},&#34;type&#34;:0,&#34;userCount&#34;:0},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:0},&#34;score&#34;:0,&#34;type&#34;:&#34;player&#34;}]} . import requests url = &quot;https://americanfootballapi.p.rapidapi.com/api/american-football/search/brady&quot; querystring = {&quot;sort&quot;:&quot;new&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;a887a57462msh889608deb83b3ddp11d368jsnce0092f67d7a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;americanfootballapi.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) json = response.json().get(&#39;results&#39;) # for post in json[&quot;results&quot;][&quot;entity&quot;]: # print(f&#39;{post[&quot;category&quot;]}&#39;) # countries = response.json().get(&#39;countries_stat&#39;) # for country in countries: # countries is a list # if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA # for key, value in country.items(): # this finds key, value pairs in country # print(key, value) for post in json: # countries is a list for posts in post[&quot;entity&quot;]: if posts[&quot;country&quot;].get(&quot;name&quot;) == &quot;USA&quot;: for key, value in post.items(): print(key, value) . {&#34;results&#34;:[{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:&#34;&#34;,&#34;gender&#34;:null,&#34;id&#34;:853680,&#34;lastName&#34;:&#34;&#34;,&#34;name&#34;:&#34;Tom Brady&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;QB&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;T. Brady&#34;,&#34;slug&#34;:&#34;brady-tom&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:false,&#34;gender&#34;:&#34;M&#34;,&#34;id&#34;:4388,&#34;name&#34;:&#34;Tampa Bay Buccaneers&#34;,&#34;nameCode&#34;:&#34;TB&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;Tampa Bay Buccaneers&#34;,&#34;slug&#34;:&#34;tampa-bay-buccaneers&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#d50a0a&#34;,&#34;secondary&#34;:&#34;#34302b&#34;,&#34;text&#34;:&#34;#34302b&#34;},&#34;type&#34;:0,&#34;userCount&#34;:14094},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:10398},&#34;score&#34;:1275870,&#34;type&#34;:&#34;player&#34;},{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:&#34;&#34;,&#34;gender&#34;:null,&#34;id&#34;:1132339,&#34;lastName&#34;:&#34;&#34;,&#34;name&#34;:&#34;Brady Christensen&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;OT&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;B. Christensen&#34;,&#34;slug&#34;:&#34;christensen-brady&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:null,&#34;gender&#34;:&#34;M&#34;,&#34;id&#34;:4415,&#34;name&#34;:&#34;Carolina Panthers&#34;,&#34;nameCode&#34;:&#34;CAR&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;Carolina Panthers&#34;,&#34;slug&#34;:&#34;carolina-panthers&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#3a84c5&#34;,&#34;secondary&#34;:&#34;#07141e&#34;,&#34;text&#34;:&#34;#07141e&#34;},&#34;type&#34;:0,&#34;userCount&#34;:2488},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:2},&#34;score&#34;:206,&#34;type&#34;:&#34;player&#34;},{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:&#34;US&#34;,&#34;name&#34;:&#34;USA&#34;},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:null,&#34;gender&#34;:null,&#34;id&#34;:887887,&#34;lastName&#34;:null,&#34;name&#34;:&#34;Brady Sheldon&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;LB&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;B. Sheldon&#34;,&#34;slug&#34;:&#34;sheldon-brady&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:true,&#34;gender&#34;:null,&#34;id&#34;:273134,&#34;name&#34;:&#34;No team&#34;,&#34;nameCode&#34;:&#34;NTE&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;No team&#34;,&#34;slug&#34;:&#34;no-team&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#52b030&#34;,&#34;secondary&#34;:&#34;#52b030&#34;,&#34;text&#34;:&#34;#ffffff&#34;},&#34;type&#34;:0,&#34;userCount&#34;:0},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:0},&#34;score&#34;:0,&#34;type&#34;:&#34;player&#34;},{&#34;entity&#34;:{&#34;category&#34;:null,&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:null,&#34;displayInverseHomeAwayTeams&#34;:null,&#34;firstName&#34;:null,&#34;gender&#34;:null,&#34;id&#34;:984311,&#34;lastName&#34;:null,&#34;name&#34;:&#34;Tyre Brady&#34;,&#34;nameCode&#34;:null,&#34;national&#34;:null,&#34;position&#34;:&#34;WR&#34;,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;T. Brady&#34;,&#34;slug&#34;:&#34;brady-tyre&#34;,&#34;sport&#34;:null,&#34;team&#34;:{&#34;country&#34;:{&#34;alpha2&#34;:null,&#34;name&#34;:null},&#34;disabled&#34;:true,&#34;gender&#34;:null,&#34;id&#34;:273134,&#34;name&#34;:&#34;No team&#34;,&#34;nameCode&#34;:&#34;NTE&#34;,&#34;national&#34;:false,&#34;ranking&#34;:null,&#34;shortName&#34;:&#34;No team&#34;,&#34;slug&#34;:&#34;no-team&#34;,&#34;sport&#34;:{&#34;id&#34;:63,&#34;name&#34;:&#34;American football&#34;,&#34;slug&#34;:&#34;american-football&#34;},&#34;teamColors&#34;:{&#34;primary&#34;:&#34;#52b030&#34;,&#34;secondary&#34;:&#34;#52b030&#34;,&#34;text&#34;:&#34;#ffffff&#34;},&#34;type&#34;:0,&#34;userCount&#34;:0},&#34;teamColors&#34;:null,&#34;type&#34;:null,&#34;userCount&#34;:0},&#34;score&#34;:0,&#34;type&#34;:&#34;player&#34;}]} . TypeError Traceback (most recent call last) /home/aaron_ru/vscode/FP/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb Cell 11 in &lt;cell line: 26&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/aaron_ru/vscode/FP/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=25&#39;&gt;26&lt;/a&gt; for post in json: # countries is a list &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/aaron_ru/vscode/FP/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; for posts in post[&#34;entity&#34;]: &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/aaron_ru/vscode/FP/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; if posts[&#34;country&#34;].get(&#34;name&#34;) == &#34;USA&#34;: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/aaron_ru/vscode/FP/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=28&#39;&gt;29&lt;/a&gt; for key, value in post.items(): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/aaron_ru/vscode/FP/_notebooks/2022-10-03-PBL-python_rapidapi.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; print(key, value) TypeError: string indices must be integers .",
            "url": "https://aaron-rub.github.io/FP/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Code Corrections!",
            "content": "menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;burger and fries&quot;: 5.98, &quot;burger and drink&quot;: 4.98, &quot;fries and drink&quot;: 2.98} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(menu[item]) #print(&quot;Total=&quot; + &quot; $&quot; + str(v)) . Menu burger $3.99 fries $1.99 drink $0.99 burger and fries $5.98 burger and drink $4.98 fries and drink $2.98 5.98 .",
            "url": "https://aaron-rub.github.io/FP/jupyter/python/2022/10/03/AP-error_testing.html",
            "relUrl": "/jupyter/python/2022/10/03/AP-error_testing.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "1.3 Notes",
            "content": "Program Design &amp; Development . Video 1.3.1 . How is a program developed . it is developed with an Idea | Then the problem it was based on is investigated | Also we have to talk about constraints | Observation with surveys and observatiolns | Plan Out design and organize tasks | Make test | . Video 1.3.2 . Acknowledging Code Segments . It is important to acknowledge code actors | Each member deserves to get credit for their work and contributions | Names must be written in documentation of the program | When there is a problem the people who developed it can fix it | Even though they might not be apart of the project they deserve to be credited | . Video 1.3.3 . How developments are created . -Programers use documentation and other things to describe the function of the program . documentation is important because it makes you more efficient and it makes sense when you need to look back at what you did | Comments are used with a # in python and a // in java | .",
            "url": "https://aaron-rub.github.io/FP/markdown/2022/09/30/1.3notes.html",
            "relUrl": "/markdown/2022/09/30/1.3notes.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Chapter 1.1 & 1.2 notes",
            "content": "Chapter 1 notes . What I learned . I learn about group skills and collaboration . Basic Knowledge . Effective collaboration produces a computing innovation that reflects diversity of talents and perspectives of those who designed it Collaboration includes diverse perspectives which help the development . Key apects . -Communication -Consensus -Conflict resolution -negotiation . important . You want to go fast go alone and if you want to go far go together . 1.2 Using Collaboration in APCSP . Learning Objectives . Explain the computing can be better with collaboration Explain why computing involves collaboration . Examples in APCSP . Pair programming with a driver and navigator Think-Pair-Share, think alone,share with partner, and share with class Leave comments, communicate with your partner/group . Tools to collaborate . Replit (code together) Github with a repository .",
            "url": "https://aaron-rub.github.io/FP/markdown/2022/09/29/chapter-1.1-1.2.html",
            "relUrl": "/markdown/2022/09/29/chapter-1.1-1.2.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Javascript Tab",
            "content": "Table . Member Role .",
            "url": "https://aaron-rub.github.io/FP/FP/js-tab",
            "relUrl": "/FP/js-tab",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "My quiz plan",
            "content": "My porgect plan: . Create a quiz similar to Jeopardy (Just to get a feel for the program) | Think (How to make my quiz unique) | Take action (Use what I know from building the original quiz and the brainstorm plan to create the quiz on my code.org) | Check with teacher and classmates (Ask teacher and classmates if anything needs to be added or changed) | . Drafting: . For my code I used a simple repeating command “on event (“Button name”,”click”, function(){“ I had it so that on the event of the button that I had set as the correct answer was clicked it would change the users screen to a green check mark. If they were to click on a different button that I had identified as a incorrect it would display a red X mark. . Data Abstraction . An example of Data Abstraction in this program is the “font size” chart. It holds multiple selections that represent different sizes. A random number function takes a random size selection from the list and sets the default font size to that selection. . The point . The point of the assignment was to get comfortable with code.org but specifically java script. . # Managing Complexity . An example of complexity management in this quiz is the layout. The quiz is divided into two parts: pasword and exploration in the program. This can easily be seen in the first part of the code, each command has its own defined function. .",
            "url": "https://aaron-rub.github.io/FP/markdown/2022/09/11/quiz-plan.html",
            "relUrl": "/markdown/2022/09/11/quiz-plan.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Code.org game",
            "content": "",
            "url": "https://aaron-rub.github.io/FP/markdown/2022/09/09/code.org-game.html",
            "relUrl": "/markdown/2022/09/09/code.org-game.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Dictionary Quiz",
            "content": "class Question: def __init__(self, prompt, answer): self.prompt = prompt self.answer = answer question_prompts = [ &quot;What is the name of the syntax that can pass variables in html? n n&quot;, &quot;What is it called for a command you give your computer? n n&quot;, &quot;Is it important to define your varibles? n n&quot;, &quot;If you do not definne your varibles what will happen when you try and run the code? n n&quot;, ] questions = [ Question(question_prompts[0], &quot;liquid&quot;), Question(question_prompts[1], &quot;input&quot;), Question(question_prompts[2], &quot;yes&quot;), Question(question_prompts[3], &quot;syntax error&quot;), ] def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;you got&quot;, score, &quot;out of&quot;, len(questions)) run_quiz(questions) . you got 4 out of 4 .",
            "url": "https://aaron-rub.github.io/FP/jupyter/python/2022/09/06/dictionary-quiz.html",
            "relUrl": "/jupyter/python/2022/09/06/dictionary-quiz.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Changing my themes",
            "content": ".",
            "url": "https://aaron-rub.github.io/FP/jupyter/python/2022/09/06/Themes.html",
            "relUrl": "/jupyter/python/2022/09/06/Themes.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "JavaScript Tutorials",
            "content": "console.log output. . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, Aaro!&quot;); . Hello, Aaron! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;My name is skylr white yo!my husband is walter white yo&quot;; console.log(msg); . My name is skylar white yo!my husband is walter white yo . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . My name is skylar white yo!my husband is walter white yo . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Aaron!&quot;); logIt(2022) . Reuse of logIT Hello, Aaron! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Yasha&quot;, &quot;yashakhoshini&quot;, 2025), new Person(&quot;James&quot;, &quot;jameshunter12&quot;, 2025), new Person(&quot;Quinn&quot;, &quot;gigtieup&quot;, 2025), new Person(&quot;Aaron&quot;, &quot;aaron-rub&quot;, 2025), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Yasha&#39;, ghID: &#39;yashakhoshini&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;James&#39;, ghID: &#39;jameshunter12&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Quinn&#39;, ghID: &#39;gigtieup&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Aaron&#39;, ghID: &#39;aaron-rub&#39;, classOf: 2025, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Yasha | yashakhoshini | 2025 | Student | James | jameshunter12 | 2025 | Student | Quinn | gigtieup | 2025 | Student | Aaron | aaron-rub | 2025 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://aaron-rub.github.io/FP/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "List and reverse list",
            "content": "mylist = [1, 2, 3, 4, 5, 6] mylist.reverse() mylist [6, 5, 4, 3, 2, 1] . [6, 5, 4, 3, 2, 1] . a = [10, 20, 30, 40, 100] len(a) . 5 . for index in range(1, 11): print(&quot;loop index range&quot;,index) . loop index range 1 loop index range 2 loop index range 3 loop index range 4 loop index range 5 loop index range 6 loop index range 7 loop index range 8 loop index range 9 loop index range 10 . numbers = [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;] numbers.sort(reverse=True) print(numbers) . [&#39;5&#39;, &#39;4&#39;, &#39;3&#39;, &#39;2&#39;, &#39;1&#39;] . fruits = [&#39;orange&#39;, &#39;banana&#39;, &#39;grape&#39;] fruits.pop(2) . &#39;grape&#39; .",
            "url": "https://aaron-rub.github.io/FP/2022/09/01/week-3-hacks-list.html",
            "relUrl": "/2022/09/01/week-3-hacks-list.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "# variable of type string name = &quot;Aaron Rubin&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 14 print(&quot;age&quot;, age, type(age)) # variable of type float weight = 141 print(&quot;weight&quot;, weight, type(weight)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;weight&quot;: weight, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Aaron Rubin &lt;class &#39;str&#39;&gt; age 14 &lt;class &#39;int&#39;&gt; weight 141 &lt;class &#39;int&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Aaron Rubin&#39;, &#39;age&#39;: 14, &#39;weight&#39;: 141, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Aaron Rubin &lt;class &#39;str&#39;&gt; . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Aaron&quot;, &quot;LastName&quot;: &quot;Rubin&quot;, &quot;DOB&quot;: &quot;November 5&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aaronr06138@gmail.com&quot;, &quot;weight&quot;: [&quot;141&quot;] }) #InfoDb [0] InfoDb.append({ &quot;FirstName&quot;: &quot;Chris&quot;, &quot;LastName&quot;: &quot;Rubin&quot;, &quot;DOB&quot;: &quot;March 18&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jabba67891@gmail.com&quot;, &quot;weight&quot;: [&quot;148&quot;] }) #InfoDb [1] print() print() print(InfoDb) # Append to List a Dictionary of key/values related to a person and cars . [{&#39;FirstName&#39;: &#39;Aaron&#39;, &#39;LastName&#39;: &#39;Rubin&#39;, &#39;DOB&#39;: &#39;November 5&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;aaronr06138@gmail.com&#39;, &#39;weight&#39;: [&#39;141&#39;]}, {&#39;FirstName&#39;: &#39;Chris&#39;, &#39;LastName&#39;: &#39;Rubin&#39;, &#39;DOB&#39;: &#39;March 18&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jabba67891@gmail.com&#39;, &#39;weight&#39;: [&#39;148&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;weight:141&quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Aaron Rubin Residence: San Diego Birth Day: November 5 weight:141Chris Rubin Residence: San Diego Birth Day: March 18 weight:141 . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Aaron Rubin Residence: San Diego Birth Day: November 5 weight:141 . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Aaron Rubin Residence: San Diego Birth Day: November 5 weight:141Crhis Rubin Residence: San Diego Birth Day: March 18 weight:141 . for index in range (len(InfoDb)): print_data(InfoDb[index]) . Aaron Rubin Residence: San Diego Birth Day: November 5 weight:141Crhis Rubin Residence: San Diego Birth Day: March 18 weight:141 .",
            "url": "https://aaron-rub.github.io/FP/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Bash test",
            "content": "conda list . # packages in environment at /home/aaron_ru/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . python --version python2 --version . Python 3.9.12 Python 2.7.18 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/aaron_ru/.local/share/jupyter/kernels/bash javascript /home/aaron_ru/.local/share/jupyter/kernels/javascript python3 /home/aaron_ru/.local/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/aaron_ru/.local/share/jupyter/kernels/python3 .",
            "url": "https://aaron-rub.github.io/FP/2022/08/25/toolchecks.html",
            "relUrl": "/2022/08/25/toolchecks.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Quiz",
            "content": "class Question: def __init__(self, prompt, answer): self.prompt = prompt self.answer = answer question_prompts = [ &quot;Chose the correct definision for a Vector (c++) n(a) A sequential container to store elements and NOT index based n(b) A fixed-size sequential collection of elements of the same type and it is index based&quot;, &quot;Can you reverse a string in Java? nyes/ nno&quot;, &quot;Is this working? nyes/ nno&quot;, &quot;What is this letter? (y) n(y) n(p)&quot;, ] questions = [ Question(question_prompts[0], &quot;a&quot;), Question(question_prompts[1], &quot;no&quot;), Question(question_prompts[2], &quot;yes&quot;), Question(question_prompts[3], &quot;y&quot;), ] def run_quiz(questions): score = 0 for question in questions: answer = input(question.prompt) if answer == question.answer: score += 1 print(&quot;you got&quot;, score, &quot;out of&quot;, len(questions)) run_quiz(questionsyou got 2 out of 4 . syntax = print(&quot;hello&quot;) . hello .",
            "url": "https://aaron-rub.github.io/FP/2022/08/24/my-first-quizs.html",
            "relUrl": "/2022/08/24/my-first-quizs.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "What I learned in my other classes today",
            "content": "My homework for AP World history for the next week . Here is the link to my AP World history homework for the next few days. — . Here is my schedule for APCSP for the next couple of weeks . Here is the link to the schedule .",
            "url": "https://aaron-rub.github.io/FP/markdown/2022/08/24/What-Iearned-post.html",
            "relUrl": "/markdown/2022/08/24/What-Iearned-post.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Fetch of Backend Jokes",
            "content": "Question 5 Star 3 Star 1 Star .",
            "url": "https://aaron-rub.github.io/FP/data/jokes",
            "relUrl": "/data/jokes",
            "date": " • Jul 10, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "My first post",
            "content": "My name is Aaron and I do like to learn!!! .",
            "url": "https://aaron-rub.github.io/FP/markdown/2020/08/21/my-first-blog-post.html",
            "relUrl": "/markdown/2020/08/21/my-first-blog-post.html",
            "date": " • Aug 21, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Welcome to my blog! . My name is Aaron Rubin and here are some fun facts about me. I have 10 siblings, 4 brothers and 6 sisters. I am new to coding. I like to learn. .",
          "url": "https://aaron-rub.github.io/FP/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Commands",
          "content": "input: is a function used to take in user input. . output: Is the printing of input into the consle . HTML: a structured markup processing tool. . Square brackets []: Square brackets are used for lists and tuples . For loop: A for loop is used for iterating over a sequence(even if its a list, tuple, dictionary, string, or a set) This works more like a iterator method as found in other object-oriented programming languages .",
          "url": "https://aaron-rub.github.io/FP/commands/",
          "relUrl": "/commands/",
          "date": ""
      }
      
  

  

  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://aaron-rub.github.io/FP/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}